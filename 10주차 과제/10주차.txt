#include <algorithm>
#include <math.h>
#include <iostream>
#include <vector>

using namespace std;

bool	can_sum(vector<int> array, int goal, vector<int>& memo)
{
	if (goal == 0)
		return (true);
	else if (goal < 0)
		return (false);
	if (memo[goal - 1] != -1)
		return memo[goal - 1];
	for (size_t i = 0; i < array.size(); i++)
		if (can_sum(array, goal - array[i], memo))
		{
			memo[goal - 1] = true;
			return (true);
		}
	memo[goal - 1] = false;
	return (false);
}

vector<int>	input_array(size_t len)
{
	vector<int> new_array(len);

	for (size_t i = 0; i < len; i++)
		cin >> new_array[i];
	return (new_array);
}

int	main()
{
	size_t		T;
	cin >> T;
	for (size_t i = 0; i < T; i++)
	{
		vector<int> array;
		int			goal, len;
		cin >> goal;
		cin >> len;
		vector<int>memo (goal, -1);
		array = input_array(len);
		if (can_sum(array, goal, memo))
			cout << "true\n";
		else
			cout << "false\n";
	}
}

#include <algorithm>
#include <math.h>
#include <iostream>
#include <vector>

using namespace std;

bool can_sum(vector<int>& array, int goal) {
    vector<bool> table(goal + 1, false);
    table[0] = true;

    for (int i = 0; i <= goal; ++i) {
        if (table[i]) {
			for (size_t j = 0; j < array.size(); j++)
			{
				if (i + array[j] <= goal) {
                    table[i + array[j]] = true;
                }
			}
        }
    }
    return table[goal];
}

vector<int>	input_array(size_t len)
{
	vector<int> new_array(len);

	for (size_t i = 0; i < len; i++)
		cin >> new_array[i];
	return (new_array);
}

int	main()
{
	size_t		T;
	cin >> T;
	for (size_t i = 0; i < T; i++)
	{
		vector<int> array;
		int			goal, len;
		cin >> goal;
		cin >> len;
		vector<int>memo (goal, -1);
		array = input_array(len);
		if (can_sum(array, goal))
			cout << "true\n";
		else
			cout << "false\n";
	}
}

#include <algorithm>
#include <math.h>
#include <iostream>
#include <vector>

using namespace std;

bool	can_sum(vector<int> array, vector<int> *result,int goal)
{
	if (goal == 0)
		return (true);
	else if (goal < 0)
		return (false);
	for (size_t i = 0; i < array.size(); i++)
	{
		if (can_sum(array, result ,goal - array[i]))
		{
			(*result).push_back(array[i]);
			return (true);
		}
	}
	return (false);
}

vector<int>	input_array(size_t len)
{
	vector<int> new_array(len);

	for (size_t i = 0; i < len; i++)
		cin >> new_array[i];
	return (new_array);
}

int	main()
{
	size_t		T, len;
	int			goal;
	vector<int> array;
	vector<int> result;

	cin >> T;
	for (size_t i = 0; i < T; i++)
	{
		cin >> goal;
		cin >> len;
		array = input_array(len);
		if (can_sum(array, &result, goal))
		{
			cout << result.size() << ' ';
			for (int i = result.size() - 1; 0 <= i; i--)
				cout << result[i] << ' ';
		}
		else
			cout << "-1";
		cout << "\n";
		result.clear();
	}
}

#include <algorithm>
#include <math.h>
#include <iostream>
#include <vector>

using namespace std;

bool isVisited(int index, vector<int> visited)
{
	for (size_t i = 0; i < visited.size(); i++)
	{
		if (visited[i] == index)
			return true;
	}
	return false;
}

bool	can_sum(vector<int> array, int goal, vector<int>& memo, vector<int>& visited)
{
	if (goal == 0)
		return (true);
	else if (goal < 0)
		return (false);
	if (memo[goal - 1] != -1)
		return memo[goal - 1];
	for (int i = 0; i < array.size(); i++)
		if (!isVisited(i, visited))
		{
			visited.push_back(i);
			if (can_sum(array, goal - array[i], memo, visited))
			{
				memo[goal - 1] = true;
				visited.pop_back();
				return (true);
			}
			visited.pop_back();
		}
	memo[goal - 1] = false;
	return (false);
}

vector<int>	input_array(size_t len)
{
	vector<int> new_array(len);

	for (size_t i = 0; i < len; i++)
		cin >> new_array[i];
	return (new_array);
}

int	main()
{
	size_t		T;
	cin >> T;
	for (size_t i = 0; i < T; i++)
	{
		vector<int> array;
		vector<int> visited;
		int	len, sum = 0;
		cin >> len;
		array = input_array(len);
		for (size_t i = 0; i < len; i++)
			sum += array[i];
		if (sum % 2 == 1)
		{
			cout << "false\n";
			continue;
		}
		vector<int>memo (sum, -1);
		if (can_sum(array, sum / 2, memo, visited))
			cout << "true\n";
		else
			cout << "false\n";
	}
}


#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int knapsack(int W, int N, vector<int>& values, vector<int>& weights) {
    vector<vector<int> > table(N + 1, vector<int>(W + 1, 0));

    for (int i = 1; i <= N; i++)
        for (int w = 1; w <= W; w++)
        {
            if (weights[i - 1] <= w)
                table[i][w] = max(table[i - 1][w], table[i - 1][w - weights[i - 1]] + values[i - 1]);
            else
                table[i][w] = table[i - 1][w];
        }
    return table[N][W];
}

vector<int>	input_array(size_t len)
{
	vector<int> new_array(len);

	for (size_t i = 0; i < len; i++)
		cin >> new_array[i];
	return (new_array);
}

int	main()
{
	size_t		T;
	cin >> T;
	for (size_t i = 0; i < T; i++)
	{
		int	W, N;
		cin >> W;
        cin >> N;
        vector<int> values(N), weights(N);

        for (int i = 0; i < N; i++)
            cin >> values[i] >> weights[i];
        cout << knapsack(W, N, values, weights) << '\n';
	}
    return (1);
}
