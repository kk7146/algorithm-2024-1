#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
 
using namespace std;
 
bool isSafe(vector<string>& board, int row, int col, int n) {
    for (int i = 0; i < row; i++) {
        if (board[i][col] == 'Q') return false;
    }
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j] == 'Q') return false;
    }
    for (int i = row, j = col; i >= 0 && j < n; i--, j++) {
        if (board[i][j] == 'Q') return false;
    }
    return true;
}
 
void solveNQueens(vector<vector<string>>& solutions, vector<string>& board, int row, int n) {
    if (row == n) {
        solutions.push_back(board);
        return;
    }
    for (int col = 0; col < n; col++) {
        if (isSafe(board, row, col, n)) {
            board[row][col] = 'Q';
            solveNQueens(solutions, board, row + 1, n);
            board[row][col] = 'X';
        }
    }
}

#include <iostream>
#include <vector>
#include <algorithm>
 
using namespace std;
 
int knapsack(int W, const vector<int>& v, const vector<int>& w, int N) {
    vector<vector<int>> dp(N + 1, vector<int>(W + 1, 0));
    for (int i = 1; i <= N; ++i) {
        for (int j = 1; j <= W; ++j) {
            if (w[i - 1] <= j) {
                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - w[i - 1]] + v[i - 1]);
            } else {
                dp[i][j] = dp[i - 1][j];
            }
        }
    }
    return dp[N][W];
}
 
int main() {
    int T;
    cin >> T;
 
    while (T--) {
        int W, N;
        cin >> W >> N;
        vector<int> v(N), w(N);
        for (int i = 0; i < N; ++i) {
            cin >> v[i] >> w[i];
        }
        cout << knapsack(W, v, w, N) << endl;
    }
 
    return 0;
}
 
vector<vector<string>> solveNQueens(int n) {
    vector<vector<string>> solutions;
    vector<string> board(n, string(n, 'X'));
    solveNQueens(solutions, board, 0, n);
    return solutions;
}
 
int main() {
    int T;
    cin >> T;
    vector<int> testCases(T);
    for (int i = 0; i < T; i++) {
        cin >> testCases[i];
    }
     
    for (int i = 0; i < T; i++) {
        int n = testCases[i];
        vector<vector<string>> solutions = solveNQueens(n);
        for (const auto& solution : solutions) {
            for (const auto& row : solution) {
                cout << row << endl;
            }
            cout << endl;
        }
    }
     
    return 0;
}

#include <iostream>
#include <vector>
#include <queue>

using namespace std;

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

int dfs(TreeNode* node, int sum);

TreeNode* buildTree(const vector<int>& nodes) {
    if (nodes.empty() || nodes[0] == 0) return NULL;
    TreeNode* root = new TreeNode(nodes[0]);
    queue<TreeNode*> q;
    q.push(root);
    size_t i = 1;
    while (!q.empty() && i < nodes.size()) {
        TreeNode* current = q.front();
        q.pop();
        if (i < nodes.size() && nodes[i] != 0) {
            current->left = new TreeNode(nodes[i]);
            q.push(current->left);
        }
        i++;
        if (i < nodes.size() && nodes[i] != 0) {
            current->right = new TreeNode(nodes[i]);
            q.push(current->right);
        }
        i++;
    }
    return root;
}

int pathSum(TreeNode* root, int sum) {
    if (!root) return 0;
    return dfs(root, sum) + pathSum(root->left, sum) + pathSum(root->right, sum);
}

int dfs(TreeNode* node, int sum) {
    if (!node) return 0;
    sum -= node->val;
    return (sum == 0 ? 1 : 0) + dfs(node->left, sum) + dfs(node->right, sum);
}

int main() {
    int T;
    cin >> T;
    while (T--) {
        int W, M;
        cin >> W >> M;
        vector<int> nodes(M);
        for (int i = 0; i < M; ++i) {
            cin >> nodes[i];
        }
        TreeNode* root = buildTree(nodes);
        cout << pathSum(root, W) << endl;
    }
    return 0;
}
