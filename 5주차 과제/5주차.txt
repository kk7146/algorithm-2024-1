#include <iostream>
#include <vector>
#include <time.h>

using namespace std;
 
void swap(int *a, int *b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}

int partition (vector<int>& array, int start, int end)
{
    int temp = start;
    int random = rand() % (end - start) + start;
    swap(&array[random], &array[start]);
    int pivot = array[start++];
 
    while(start <= end){
        while(array[start] <= pivot && start <= end)
            start++;
        while(array[end] >= pivot && start <= end)
            end--;
        if (start <= end)
            swap(&array[start], &array[end]);
    }
    swap(&array[temp], &array[end]);
    return end;
}
 
void quick_sort(vector<int>& array, int start, int end){
    if (start < end)
    {
        int middle = partition(array, start, end);
        quick_sort(array, start, middle - 1);
        quick_sort(array, middle + 1, end);
    }
}

vector<int>	input_array(size_t len)
{
	vector<int> new_array;
	int			buf;
    srand(time(NULL));

	for (size_t i = 0; i < len; i++)
	{
		cin >> buf;
		new_array.push_back(buf);
	}
	return (new_array);
}

int main()
{
    vector<int>	array;
    int			test_count;
    int			len;
 
    cin >> test_count;
    for (int i = 0; i < test_count; i++)
    {
        cin >> len;
        array = input_array(len);
        quick_sort(array, 0, len - 1);
		for (int i = 0; i < len; i++)
				cout << array[i] << ' ';
    }
    return (1);
}

//정확도 : 이 코드는 문제 설명에 나와 있는 대로 배열 내에 절반 이상을 차지하는 요소가 무조건 있다는 가정 하에 알고리즘은 정확한 결과를 반환합니다.
//시간 복잡도: 평균적인 시간 복잡도는 O(n)이 될 수 있지만, 최악의 경우 시간 복잡도는 O(∞)입니다.
//확률적으로 무한대를 가도 확률이 반 이상인 특정 요소가 나오지 않는 경우가 만약에라도 있을 수 있기 때문입니다.
//공간 복잡도: 추가적인 공간을 거의 사용하지 않습니다 (arr 배열 외에는 몇 개의 기본적인 변수만 사용). 따라서 공간 복잡도는 O(1)입니다.


#include <time.h>
#include <iostream>
#include <algorithm>
#include <math.h>
#include <vector>

using namespace std;

int half(vector<int> arr)
{
	while (1)
	{
		int random = rand() % arr.size();
		int count = 0;
		for (size_t i = 0; i < arr.size(); i++)
		{
			if (arr[random] == arr[i])
				count++;
			if (count * 2 >= arr.size())
				return (arr[random]);
		}
	}
}

vector<int>	input_array(size_t len)
{
	vector<int> new_array;
	int			buf;
    srand(time(NULL));

	for (size_t i = 0; i < len; i++)
	{
		cin >> buf;
		new_array.push_back(buf);
	}
	return (new_array);
}

int main()
{
	int testcase;

	cin >> testcase;
	srand(time(NULL));
	for (size_t i = 0; i < testcase; i++)
	{
		int len;
		vector<int> arr;

		cin >> len;
		arr = input_array(len);
		cout << half(arr) << '\n';
	}
	
}

#include <iostream>
#include <vector>
#include <algorithm>
#define MAX 1000000000
#define MIN 0

using namespace std;

struct chunk {
    bool used = false;
    int minNum = MAX;
    int maxNum = MIN;
};

int maxGap(vector<int> arr, int len) {
    if (len < 2)
		return 0;
	auto [minNum, maxNum] = minmax_element(arr.begin(), arr.end());
    int chunkSize = max(1, (*maxNum - *minNum) / (len - 1));
    int chunkCount = (*maxNum - *minNum) / chunkSize + 1;
    vector<chunk> chunks(chunkCount);

	for (int i = 0; i < len; i++)
	{
		int chunkIndex = (arr[i] - *minNum) / chunkSize;
        chunks[chunkIndex].used = true;
        chunks[chunkIndex].minNum = min(arr[i], chunks[chunkIndex].minNum);
        chunks[chunkIndex].maxNum = max(arr[i], chunks[chunkIndex].maxNum);
	}
    int prevChunkMax = *minNum, maxGap = 0;
	len = chunks.size();
	for (int i = 0; i < len; i++)
	{
		if (!chunks[i].used)
			continue;
        maxGap = max(maxGap, chunks[i].minNum - prevChunkMax);
        prevChunkMax = chunks[i].maxNum;
	}
    return maxGap;
}

vector<int> input_array(int len)
{
    vector<int> new_array(len);
    for (int i = 0; i < len; i++)
        cin >> new_array[i];
    return new_array;
}


int main()
{
	ios_base::sync_with_stdio(false);
    cin.tie(NULL);
	int testcase;

	cin >> testcase;
	for (int i = 0; i < testcase; i++)
	{
		int len;
		vector<int> arr;

		cin >> len;
		arr = input_array(len);
		cout << maxGap(arr, len) << '\n';
	}
}